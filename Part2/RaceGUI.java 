package Part2;

import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;
import java.util.List;

public class RaceGUI extends JPanel {
    private List<HorseGUI> horses;
    private JButton startRaceButton;
    private JButton resetButton;
    private JPanel raceTrackPanel;
    private Timer raceTimer;
    private int trackLength;
    private int laneCount;
    private String trackShape;
    private String weatherCondition;

    public RaceGUI() {
        setLayout(new BorderLayout());
        horses = new ArrayList<>();
        
        // Initialize default values
        trackLength = 100;
        laneCount = 5;
        trackShape = "Oval";
        weatherCondition = "Dry";
        
        // Create race track panel
        raceTrackPanel = new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                drawTrack(g);
                drawHorses(g);
            }
        };
        raceTrackPanel.setBackground(new Color(240, 240, 240));
        
        // Control panel
        JPanel controlPanel = new JPanel();
        startRaceButton = new JButton("Start Race");
        resetButton = new JButton("Reset");
        
        startRaceButton.addActionListener(e -> startRace());
        resetButton.addActionListener(e -> resetRace());
        
        controlPanel.add(startRaceButton);
        controlPanel.add(resetButton);
        
        add(raceTrackPanel, BorderLayout.CENTER);
        add(controlPanel, BorderLayout.SOUTH);
        
        // Initialize timer
        raceTimer = new Timer(100, e -> {
            updateRace();
            raceTrackPanel.repaint();
        });
    }
    
    private void drawTrack(Graphics g) {
        // Draw track based on shape
        g.setColor(Color.GREEN);
        if (trackShape.equals("Oval")) {
            g.fillOval(50, 50, getWidth() - 100, getHeight() - 100);
        } else if (trackShape.equals("Figure-eight")) {
            // Draw figure-eight track
            int centerX = getWidth() / 2;
            int centerY = getHeight() / 2;
            int radius = Math.min(getWidth(), getHeight()) / 3;
            
            g.fillOval(centerX - radius, centerY - radius, radius * 2, radius * 2);
            g.fillOval(centerX - radius, centerY, radius * 2, radius * 2);
        }
        
        // Draw lanes
        g.setColor(Color.WHITE);
        for (int i = 0; i < laneCount; i++) {
            int y = (getHeight() / (laneCount + 1)) * (i + 1);
            g.drawLine(50, y, getWidth() - 50, y);
        }
    }
    
    private void drawHorses(Graphics g) {
        for (HorseGUI horse : horses) {
            horse.draw(g);
        }
    }
    
    private void startRace() {
        if (horses.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No horses added to the race!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        startRaceButton.setEnabled(false);
        resetButton.setEnabled(false);
        raceTimer.start();
    }
    
    private void updateRace() {
        boolean raceFinished = true;
        
        for (HorseGUI horse : horses) {
            if (!horse.hasFinished()) {
                horse.move();
                raceFinished = false;
            }
        }
        
        if (raceFinished) {
            raceTimer.stop();
            showRaceResults();
            startRaceButton.setEnabled(true);
            resetButton.setEnabled(true);
        }
    }
    
    private void showRaceResults() {
        // Sort horses by distance traveled
        horses.sort((h1, h2) -> Integer.compare(h2.getDistanceTraveled(), h1.getDistanceTraveled()));
        
        StringBuilder results = new StringBuilder("Race Results:\n\n");
        for (int i = 0; i < horses.size(); i++) {
            results.append(i + 1).append(". ").append(horses.get(i).getName()).append("\n");
        }
        
        JOptionPane.showMessageDialog(this, results.toString(), "Race Finished", JOptionPane.INFORMATION_MESSAGE);
    }
    
    private void resetRace() {
        raceTimer.stop();
        for (HorseGUI horse : horses) {
            horse.reset();
        }
        raceTrackPanel.repaint();
        startRaceButton.setEnabled(true);
    }
    
    public void addHorse(HorseGUI horse) {
        horses.add(horse);
        raceTrackPanel.repaint();
    }
    
    public void setTrackParameters(int length, int lanes, String shape, String weather) {
        this.trackLength = length;
        this.laneCount = lanes;
        this.trackShape = shape;
        this.weatherCondition = weather;
        raceTrackPanel.repaint();
    }
}